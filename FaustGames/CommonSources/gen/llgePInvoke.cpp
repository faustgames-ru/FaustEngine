/* ============================================================== */
/* This file is automatically generated. Please do not modify it. */
/* ============================================================== */

#include "llge.h"

namespace llge
{
	extern "C" DLLEXPORT void API_CALL llge_Aabb2dComponent_upateAabb2d (IAabb2dComponent * classInstance, float minX, float minY, float maxX, float maxY)
	{
		classInstance->upateAabb2d(minX, minY, maxX, maxY);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Transform2dComponent_upateTransform (ITransform2dComponent * classInstance, float x, float y, float z, float rotation, float scale)
	{
		classInstance->upateTransform(x, y, z, rotation, scale);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Transform2dComponent_upatePivot (ITransform2dComponent * classInstance, float x, float y)
	{
		classInstance->upatePivot(x, y);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_RenderLayerComponent_upateRenderLayer (IRenderLayerComponent * classInstance, IStaticRenderLayer * value)
	{
		classInstance->upateRenderLayer(value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Mesh2dComponent_updateData (IMesh2dComponent * classInstance, void * mesh2dVertices, void * ushortIndices)
	{
		classInstance->updateData(mesh2dVertices, ushortIndices);
	}
	
	extern "C" DLLEXPORT ITransform2dComponent * API_CALL llge_Mesh2dEntity_getTransform (IMesh2dEntity * classInstance)
	{
		return classInstance->getTransform();
	}
	
	extern "C" DLLEXPORT IAabb2dComponent * API_CALL llge_Mesh2dEntity_getAabbComponent (IMesh2dEntity * classInstance)
	{
		return classInstance->getAabbComponent();
	}
	
	extern "C" DLLEXPORT IMesh2dComponent * API_CALL llge_Mesh2dEntity_getMesh (IMesh2dEntity * classInstance)
	{
		return classInstance->getMesh();
	}
	
	extern "C" DLLEXPORT IMesh2dEntity * API_CALL llge_EntitiesFactory_createMeshEntity (IEntitiesFactory * classInstance, int verticesCount, int indicesCount)
	{
		return classInstance->createMeshEntity(verticesCount, indicesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_EntitiesFactory_disposeMeshEntities (IEntitiesFactory * classInstance)
	{
		classInstance->disposeMeshEntities();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_EntitiesFactory_dispose (IEntitiesFactory * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT IStaticRenderLayer * API_CALL llge_RenderSystem_createStaticLayer (IRenderSystem * classInstance, float z)
	{
		return classInstance->createStaticLayer(z);
	}
	
	extern "C" DLLEXPORT IImage * API_CALL llge_RenderSystem_createImage (IRenderSystem * classInstance)
	{
		return classInstance->createImage();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_TestRenderSystem_viewport (ITestRenderSystem * classInstance, int width, int height)
	{
		classInstance->viewport(width, height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_TestRenderSystem_create (ITestRenderSystem * classInstance)
	{
		classInstance->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_TestRenderSystem_render (ITestRenderSystem * classInstance)
	{
		classInstance->render();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_TestRenderSystem_cleanup (ITestRenderSystem * classInstance)
	{
		classInstance->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_TestRenderSystem_dispose (ITestRenderSystem * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT ITestRenderSystem * API_CALL llge_Factory_createRenderSystem (IFactory * classInstance)
	{
		return classInstance->createRenderSystem();
	}
	
	extern "C" DLLEXPORT IEntitiesFactory * API_CALL llge_Factory_createEntitiesFactory (IFactory * classInstance)
	{
		return classInstance->createEntitiesFactory();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Factory_dispose (IFactory * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_Texture_getId (ITexture * classInstance)
	{
		return classInstance->getId();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Texture_LoadPixels (ITexture * classInstance, int width, int height, void * pixels)
	{
		classInstance->LoadPixels(width, height, pixels);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Texture_create (ITexture * classInstance)
	{
		classInstance->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Texture_cleanup (ITexture * classInstance)
	{
		classInstance->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_Texture_dispose (ITexture * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_VertexFormatsFacade_getPositionTextureColorFormat (IVertexFormatsFacade * classInstance)
	{
		return classInstance->getPositionTextureColorFormat();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_EffectsFacade_getTextureColorEffect (IEffectsFacade * classInstance)
	{
		return classInstance->getTextureColorEffect();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_EffectsFacade_getTextureLightmapColorEffect (IEffectsFacade * classInstance)
	{
		return classInstance->getTextureLightmapColorEffect();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_UniformsFacade_setTexture (IUniformsFacade * classInstance, ITexture * texture)
	{
		classInstance->setTexture(texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_UniformsFacade_setLightMap (IUniformsFacade * classInstance, ITexture * texture)
	{
		classInstance->setLightMap(texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_UniformsFacade_setProjection (IUniformsFacade * classInstance, void * floatMatrix)
	{
		classInstance->setProjection(floatMatrix);
	}
	
	extern "C" DLLEXPORT IUniformsFacade * API_CALL llge_GraphicsFacade_getUniforms (IGraphicsFacade * classInstance)
	{
		return classInstance->getUniforms();
	}
	
	extern "C" DLLEXPORT IVertexFormatsFacade * API_CALL llge_GraphicsFacade_getVertexFormatsFacade (IGraphicsFacade * classInstance)
	{
		return classInstance->getVertexFormatsFacade();
	}
	
	extern "C" DLLEXPORT IEffectsFacade * API_CALL llge_GraphicsFacade_getEffectsFacade (IGraphicsFacade * classInstance)
	{
		return classInstance->getEffectsFacade();
	}
	
	extern "C" DLLEXPORT ITexture * API_CALL llge_GraphicsFacade_createTexture (IGraphicsFacade * classInstance)
	{
		return classInstance->createTexture();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_viewport (IGraphicsFacade * classInstance, int width, int height)
	{
		classInstance->viewport(width, height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_setClearState (IGraphicsFacade * classInstance, uint color, float depth)
	{
		classInstance->setClearState(color, depth);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_clear (IGraphicsFacade * classInstance)
	{
		classInstance->clear();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_draw (IGraphicsFacade * classInstance, int effect, int vertexFormat, void * vertices, void * indices, int primitivesCount)
	{
		classInstance->draw(effect, vertexFormat, vertices, indices, primitivesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_create (IGraphicsFacade * classInstance)
	{
		classInstance->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_cleanup (IGraphicsFacade * classInstance)
	{
		classInstance->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFacade_dispose (IGraphicsFacade * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT IGraphicsFacade * API_CALL llge_GraphicsFactory_createGraphicsFacade (IGraphicsFactory * classInstance)
	{
		return classInstance->createGraphicsFacade();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GraphicsFactory_dispose (IGraphicsFactory * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_QuadTree_insert (IQuadTree * classInstance, float minX, float minY, float maxX, float maxY, int userData)
	{
		return classInstance->insert(minX, minY, maxX, maxY, userData);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_QuadTree_remove (IQuadTree * classInstance, int id)
	{
		classInstance->remove(id);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_QuadTree_query (IQuadTree * classInstance, float minX, float minY, float maxX, float maxY)
	{
		classInstance->query(minX, minY, maxX, maxY);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_QuadTree_getQueryResults (IQuadTree * classInstance, void * intBuffer)
	{
		classInstance->getQueryResults(intBuffer);
	}
	
	extern "C" DLLEXPORT int API_CALL llge_QuadTree_getQueryResultsCount (IQuadTree * classInstance)
	{
		return classInstance->getQueryResultsCount();
	}
	
	extern "C" DLLEXPORT int API_CALL llge_QuadTree_getIterationsCount (IQuadTree * classInstance)
	{
		return classInstance->getIterationsCount();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_QuadTree_dispose (IQuadTree * classInstance)
	{
		classInstance->dispose();
	}
	
	extern "C" DLLEXPORT IQuadTree * API_CALL llge_GeometryFactory_createQuadTree (IGeometryFactory * classInstance)
	{
		return classInstance->createQuadTree();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_GeometryFactory_dispose (IGeometryFactory * classInstance)
	{
		classInstance->dispose();
	}
	
}

