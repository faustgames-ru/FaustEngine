/* ============================================================== */
/* This file is automatically generated. Please do not modify it. */
/* ============================================================== */

using System;
using System.Runtime.InteropServices;

namespace llge
{
	public class Version
	{
#if __UNIFIED__
		public const string Dll = "__Internal";
#else
		public const string Dll = "llge";
#endif
	}
	
	public enum BatcherLightingMode
	{
		BLMNone = 0x0,
		BLMDynamicCpu = 0x1,
	}
	
	public enum TextureFilterMode
	{
		Nearest = 0x0,
		Linear = 0x1,
		NearestMipmapNearest = 0x2,
		LinearMipmapNearest = 0x3,
		NearestMipmapLinear = 0x4,
		LinearMipmapLinear = 0x5,
	}
	
	public enum BlendMode
	{
		None = 0x0,
		Alpha = 0x1,
		Additive = 0x2,
		Normal = 0x3,
		Multiplicative = 0x4,
	}
	
	public enum GraphicsEffects
	{
		EffectTextureColor = 0x0,
		EffectTextureLightmapColor = 0x1,
		EffectWater = 0x2,
		EffectSolid = 0x3,
		EffectSolidColor = 0x5,
		EffectBloomFilter = 0x6,
		EffectTextureColorHighlight = 0x7,
		EffectTextureAlphamaskColor = 0x8,
	}
	
	public enum GraphicsVertexFormats
	{
		FormatPositionTextureColor = 0x0,
		FormatPositionNormal = 0x1,
		FormatPositionTexture = 0x2,
		FormatPositionColor = 0x3,
	}
	
	public enum CubemapPlane
	{
		PositiveX = 0x0,
		NegativeX = 0x1,
		PositiveY = 0x2,
		NegativeY = 0x3,
		PositiveZ = 0x4,
		NegativeZ = 0x5,
	}
	
	public enum TextureQueryFormat
	{
		TQFNone = 0x0,
		TQFRgba8888 = 0x1,
		TQFRgba4444 = 0x2,
		TQFPlatformCompressed = 0x3,
	}
	
	public enum TextureImage2dFormat
	{
		TFRgba8888 = 0x0,
		TFRgb888 = 0x1,
		TFRgba4444 = 0x2,
		TFPvrtc12 = 0x3,
		TFPvrtc14 = 0x4,
		TFAtc = 0x5,
		TFEtc2 = 0x6,
		TFDxt = 0x7,
		TFEtc1 = 0x8,
		TFEnumSize = 0x9,
	}
	
	public enum PhysicalBodyType
	{
		Static = 0x1,
		Dynamic = 0x2,
		Kinematic = 0x3,
	}
	
	public enum TerrainStripeConfigType
	{
		Left = 0x1,
		Right = 0x2,
		Top = 0x3,
		Bottom = 0x4,
	}
	
	public enum TerrainStripePhysicsType
	{
		PhysicsNone = 0x0,
		PhysicsTop = 0x1,
		PhysicsBottom = 0x2,
		PhysicsLeft = 0x4,
		PhysicsRight = 0x8,
		PhysicsAll = 0xff,
	}
	
	public enum BoneFx
	{
		BoneFxNone = 0x0,
		BoneFxIgnoreLight = 0x1,
		BoneFxBlur = 0x2,
	}
	
	public enum BatcherMode
	{
		BatcherModeDefault = 0x0,
		BatcherModeBlur = 0x1,
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct PhysicsFixtureConfig
	{
		public float density;
		public float friction;
		public float bonce;
		public uint collidesWith;
		public uint collisionGroup;
		public uint isSensor;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct RayCastResult
	{
		public float resultPositionX;
		public float resultPositionY;
		public float resultNormalX;
		public float resultNormalY;
		public uint resultColisionGroup;
		public uint resultRaycastGroup;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct GraphicsConfig
	{
		public bool generateMipmaps;
		public bool earlyDepthPath;
		public bool enableFog;
		public bool earlyFragmentTestsShaderCode;
		public uint texturesFilter;
		public int mipmapsLevel;
		public int bloomDownsample;
		public bool refraction;
		public float refractionScale;
		public float refractionVelocityX;
		public float refractionVelocityY;
		public bool vignetting;
		public float vignettingR0;
		public float vignettingR1;
		public float vignettingR2;
		public uint vignettingColor0;
		public uint vignettingColor1;
		public uint vignettingColor2;
		public float ellapsedTime;
		public float postEffectsScale;
		public bool useRgbTransforms;
		public bool useColorCorrection;
		public float colorCorrectionRotation;
		public float colorCorrectionScaleX;
		public float colorCorrectionScaleY;
		public float colorCorrectionOffsetY;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct EffectConfig
	{
		public uint texture;
		public uint alpha;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct LightingConfig
	{
		public uint texture;
		public uint lightmap;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct HighlightConfig
	{
		public uint texture;
		public uint highlightColor;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Light2d
	{
		public float x;
		public float y;
		public float r;
		public float i;
		public uint color;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Lighting2dConfig
	{
		public IntPtr LightsPtr;
		public int LightsCount;
		public uint ambient;
		public float x;
		public float y;
		public float w;
		public float h;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct BatcherConfig
	{
		public int effect;
		public int blendMode;
		public IntPtr vertices;
		public int verticesCount;
		public IntPtr indices;
		public int indicesCount;
		public int colorScale;
		public IntPtr texture;
	}
	
	public class Texture
	{
		public IntPtr ClassInstance;
		public uint GetId ()
		{
			return llge_Texture_getId(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_Texture_getId (IntPtr classInstance);
		public uint GetAlphaId ()
		{
			return llge_Texture_getAlphaId(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_Texture_getAlphaId (IntPtr classInstance);
		public IntPtr GetTextureInstance ()
		{
			return llge_Texture_getTextureInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_Texture_getTextureInstance (IntPtr classInstance);
	}
	
	public class TextureImage2d
	{
		public IntPtr ClassInstance;
		public IntPtr GetTextureImageInstance ()
		{
			return llge_TextureImage2d_getTextureImageInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TextureImage2d_getTextureImageInstance (IntPtr classInstance);
		public Texture GetTexture ()
		{
			return new Texture{ ClassInstance = llge_TextureImage2d_getTexture(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TextureImage2d_getTexture (IntPtr classInstance);
		public void LoadPixels (int width, int height, TextureImage2dFormat format, IntPtr pixels)
		{
			llge_TextureImage2d_LoadPixels(ClassInstance, width, height, format, pixels);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TextureImage2d_LoadPixels (IntPtr classInstance, int width, int height, TextureImage2dFormat format, IntPtr pixels);
		public void Create ()
		{
			llge_TextureImage2d_create(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TextureImage2d_create (IntPtr classInstance);
		public void Cleanup ()
		{
			llge_TextureImage2d_cleanup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TextureImage2d_cleanup (IntPtr classInstance);
		public void Dispose ()
		{
			llge_TextureImage2d_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TextureImage2d_dispose (IntPtr classInstance);
		public int GetVerticesCount ()
		{
			return llge_TextureImage2d_getVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TextureImage2d_getVerticesCount (IntPtr classInstance);
		public IntPtr GetVertices ()
		{
			return llge_TextureImage2d_getVertices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TextureImage2d_getVertices (IntPtr classInstance);
		public int GetIndicesCount ()
		{
			return llge_TextureImage2d_getIndicesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TextureImage2d_getIndicesCount (IntPtr classInstance);
		public IntPtr GetIndices ()
		{
			return llge_TextureImage2d_getIndices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TextureImage2d_getIndices (IntPtr classInstance);
		public bool IsAtlasEntry ()
		{
			return llge_TextureImage2d_isAtlasEntry(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_TextureImage2d_isAtlasEntry (IntPtr classInstance);
	}
	
	public class RenderTarget2d
	{
		public IntPtr ClassInstance;
		public IntPtr GetRenderTargetInstance ()
		{
			return llge_RenderTarget2d_getRenderTargetInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_RenderTarget2d_getRenderTargetInstance (IntPtr classInstance);
		public Texture GetTexture ()
		{
			return new Texture{ ClassInstance = llge_RenderTarget2d_getTexture(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_RenderTarget2d_getTexture (IntPtr classInstance);
		public void Create (int width, int height)
		{
			llge_RenderTarget2d_create(ClassInstance, width, height);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTarget2d_create (IntPtr classInstance, int width, int height);
		public void Cleanup ()
		{
			llge_RenderTarget2d_cleanup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTarget2d_cleanup (IntPtr classInstance);
		public void Dispose ()
		{
			llge_RenderTarget2d_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTarget2d_dispose (IntPtr classInstance);
	}
	
	public class RenderTargetDepth2d
	{
		public IntPtr ClassInstance;
		public IntPtr GetRenderTargetInstance ()
		{
			return llge_RenderTargetDepth2d_getRenderTargetInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_RenderTargetDepth2d_getRenderTargetInstance (IntPtr classInstance);
		public Texture GetTexture ()
		{
			return new Texture{ ClassInstance = llge_RenderTargetDepth2d_getTexture(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_RenderTargetDepth2d_getTexture (IntPtr classInstance);
		public Texture GetDepthTexture ()
		{
			return new Texture{ ClassInstance = llge_RenderTargetDepth2d_getDepthTexture(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_RenderTargetDepth2d_getDepthTexture (IntPtr classInstance);
		public void Create (int width, int height)
		{
			llge_RenderTargetDepth2d_create(ClassInstance, width, height);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTargetDepth2d_create (IntPtr classInstance, int width, int height);
		public void Cleanup ()
		{
			llge_RenderTargetDepth2d_cleanup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTargetDepth2d_cleanup (IntPtr classInstance);
		public void Dispose ()
		{
			llge_RenderTargetDepth2d_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_RenderTargetDepth2d_dispose (IntPtr classInstance);
	}
	
	public class UniformsFacade
	{
		public IntPtr ClassInstance;
		public void ResetSamplers ()
		{
			llge_UniformsFacade_resetSamplers(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_resetSamplers (IntPtr classInstance);
		public void SetTime (float value)
		{
			llge_UniformsFacade_setTime(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setTime (IntPtr classInstance, float value);
		public void SetNormalmap (Texture texture)
		{
			llge_UniformsFacade_setNormalmap(ClassInstance, texture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setNormalmap (IntPtr classInstance, IntPtr texture);
		public void SetEnvironment (Texture texture)
		{
			llge_UniformsFacade_setEnvironment(ClassInstance, texture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setEnvironment (IntPtr classInstance, IntPtr texture);
		public void SetDepthmap (Texture texture)
		{
			llge_UniformsFacade_setDepthmap(ClassInstance, texture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setDepthmap (IntPtr classInstance, IntPtr texture);
		public void SetTexture (Texture texture)
		{
			llge_UniformsFacade_setTexture(ClassInstance, texture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setTexture (IntPtr classInstance, IntPtr texture);
		public void SetLightMap (Texture texture)
		{
			llge_UniformsFacade_setLightMap(ClassInstance, texture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setLightMap (IntPtr classInstance, IntPtr texture);
		public void SetProjection (IntPtr floatMatrix)
		{
			llge_UniformsFacade_setProjection(ClassInstance, floatMatrix);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setProjection (IntPtr classInstance, IntPtr floatMatrix);
		public void SetFogStart (float value)
		{
			llge_UniformsFacade_setFogStart(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setFogStart (IntPtr classInstance, float value);
		public void SetFogDensity (float value)
		{
			llge_UniformsFacade_setFogDensity(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setFogDensity (IntPtr classInstance, float value);
		public void SetFogScale (float value)
		{
			llge_UniformsFacade_setFogScale(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setFogScale (IntPtr classInstance, float value);
		public void SetFogColor (float r, float g, float b)
		{
			llge_UniformsFacade_setFogColor(ClassInstance, r, g, b);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_UniformsFacade_setFogColor (IntPtr classInstance, float r, float g, float b);
	}
	
	public class VertexBuffer
	{
		public IntPtr ClassInstance;
		public int GetId ()
		{
			return llge_VertexBuffer_getId(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_VertexBuffer_getId (IntPtr classInstance);
		public void Create ()
		{
			llge_VertexBuffer_create(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_VertexBuffer_create (IntPtr classInstance);
		public void SetData (IntPtr data, int count)
		{
			llge_VertexBuffer_setData(ClassInstance, data, count);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_VertexBuffer_setData (IntPtr classInstance, IntPtr data, int count);
		public void Cleanup ()
		{
			llge_VertexBuffer_cleanup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_VertexBuffer_cleanup (IntPtr classInstance);
		public void Dispose ()
		{
			llge_VertexBuffer_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_VertexBuffer_dispose (IntPtr classInstance);
	}
	
	public class GraphicsFacade
	{
		public IntPtr ClassInstance;
		public UniformsFacade GetUniforms ()
		{
			return new UniformsFacade{ ClassInstance = llge_GraphicsFacade_getUniforms(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFacade_getUniforms (IntPtr classInstance);
		public void Viewport (int width, int height)
		{
			llge_GraphicsFacade_viewport(ClassInstance, width, height);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_viewport (IntPtr classInstance, int width, int height);
		public void SetRenderTarget (IntPtr renderTargetInstance)
		{
			llge_GraphicsFacade_setRenderTarget(ClassInstance, renderTargetInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_setRenderTarget (IntPtr classInstance, IntPtr renderTargetInstance);
		public void SetClearState (uint color, float depth)
		{
			llge_GraphicsFacade_setClearState(ClassInstance, color, depth);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_setClearState (IntPtr classInstance, uint color, float depth);
		public void SetBlendMode (BlendMode blendMode)
		{
			llge_GraphicsFacade_setBlendMode(ClassInstance, blendMode);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_setBlendMode (IntPtr classInstance, BlendMode blendMode);
		public void Clear ()
		{
			llge_GraphicsFacade_clear(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_clear (IntPtr classInstance);
		public void ClearDepth ()
		{
			llge_GraphicsFacade_clearDepth(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_clearDepth (IntPtr classInstance);
		public void ResetDrawCallsCounter ()
		{
			llge_GraphicsFacade_resetDrawCallsCounter(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_resetDrawCallsCounter (IntPtr classInstance);
		public int GetDrawCallsCounterValue ()
		{
			return llge_GraphicsFacade_getDrawCallsCounterValue(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_GraphicsFacade_getDrawCallsCounterValue (IntPtr classInstance);
		public void DrawEdges (GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, int primitivesCount)
		{
			llge_GraphicsFacade_drawEdges(ClassInstance, effect, vertexFormat, vertices, primitivesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_drawEdges (IntPtr classInstance, GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, int primitivesCount);
		public void Draw (GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, int primitivesCount)
		{
			llge_GraphicsFacade_draw(ClassInstance, effect, vertexFormat, vertices, primitivesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_draw (IntPtr classInstance, GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, int primitivesCount);
		public void DrawElements (GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, IntPtr indices, int primitivesCount)
		{
			llge_GraphicsFacade_drawElements(ClassInstance, effect, vertexFormat, vertices, indices, primitivesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_drawElements (IntPtr classInstance, GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertices, IntPtr indices, int primitivesCount);
		public void DrawVertexBuffer (GraphicsEffects effect, GraphicsVertexFormats vertexFormat, VertexBuffer vertexBuffer, IntPtr indices, int primitivesCount)
		{
			llge_GraphicsFacade_drawVertexBuffer(ClassInstance, effect, vertexFormat, vertexBuffer.ClassInstance, indices, primitivesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_drawVertexBuffer (IntPtr classInstance, GraphicsEffects effect, GraphicsVertexFormats vertexFormat, IntPtr vertexBuffer, IntPtr indices, int primitivesCount);
		public void SetEffectConstantFloat (GraphicsEffects effect, string name, float value)
		{
			llge_GraphicsFacade_setEffectConstantFloat(ClassInstance, effect, name, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_setEffectConstantFloat (IntPtr classInstance, GraphicsEffects effect, string name, float value);
		public void SetEffectConstantColor (GraphicsEffects effect, string name, uint value)
		{
			llge_GraphicsFacade_setEffectConstantColor(ClassInstance, effect, name, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_setEffectConstantColor (IntPtr classInstance, GraphicsEffects effect, string name, uint value);
		public int GetPixelsWidth ()
		{
			return llge_GraphicsFacade_getPixelsWidth(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_GraphicsFacade_getPixelsWidth (IntPtr classInstance);
		public int GetPixelsHeight ()
		{
			return llge_GraphicsFacade_getPixelsHeight(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_GraphicsFacade_getPixelsHeight (IntPtr classInstance);
		public void GetPixels (IntPtr target, bool inverse)
		{
			llge_GraphicsFacade_getPixels(ClassInstance, target, inverse);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_getPixels (IntPtr classInstance, IntPtr target, bool inverse);
		public void Create ()
		{
			llge_GraphicsFacade_create(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_create (IntPtr classInstance);
		public void GrabDefaultRenderTarget ()
		{
			llge_GraphicsFacade_grabDefaultRenderTarget(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_grabDefaultRenderTarget (IntPtr classInstance);
		public void Cleanup ()
		{
			llge_GraphicsFacade_cleanup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_cleanup (IntPtr classInstance);
		public void Dispose ()
		{
			llge_GraphicsFacade_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFacade_dispose (IntPtr classInstance);
		public bool IsTextureFormatSupported (TextureImage2dFormat format)
		{
			return llge_GraphicsFacade_isTextureFormatSupported(ClassInstance, format);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_GraphicsFacade_isTextureFormatSupported (IntPtr classInstance, TextureImage2dFormat format);
	}
	
	public class GraphicsFactory
	{
		public IntPtr ClassInstance;
		public GraphicsFacade CreateGraphicsFacade ()
		{
			return new GraphicsFacade{ ClassInstance = llge_GraphicsFactory_createGraphicsFacade(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFactory_createGraphicsFacade (IntPtr classInstance);
		public TextureImage2d CreateTextureImage2d (bool generateMipmaps, bool useFilter)
		{
			return new TextureImage2d{ ClassInstance = llge_GraphicsFactory_createTextureImage2d(ClassInstance, generateMipmaps, useFilter) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFactory_createTextureImage2d (IntPtr classInstance, bool generateMipmaps, bool useFilter);
		public RenderTarget2d CreateRenderTarget2d ()
		{
			return new RenderTarget2d{ ClassInstance = llge_GraphicsFactory_createRenderTarget2d(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFactory_createRenderTarget2d (IntPtr classInstance);
		public RenderTargetDepth2d CreateRenderTargetDepth2d ()
		{
			return new RenderTargetDepth2d{ ClassInstance = llge_GraphicsFactory_createRenderTargetDepth2d(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFactory_createRenderTargetDepth2d (IntPtr classInstance);
		public VertexBuffer CreateVertexBuffer ()
		{
			return new VertexBuffer{ ClassInstance = llge_GraphicsFactory_createVertexBuffer(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GraphicsFactory_createVertexBuffer (IntPtr classInstance);
		public void SetupGraphics (IntPtr graphicsConfig)
		{
			llge_GraphicsFactory_setupGraphics(ClassInstance, graphicsConfig);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFactory_setupGraphics (IntPtr classInstance, IntPtr graphicsConfig);
		public void Dispose ()
		{
			llge_GraphicsFactory_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GraphicsFactory_dispose (IntPtr classInstance);
	}
	
	public class MarchingSquares
	{
		public IntPtr ClassInstance;
		public void Build (IntPtr boolPoints, int w, int h)
		{
			llge_MarchingSquares_build(ClassInstance, boolPoints, w, h);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_build (IntPtr classInstance, IntPtr boolPoints, int w, int h);
		public void BuildSolid (IntPtr boolPoints, IntPtr boolInversePoints, int w, int h)
		{
			llge_MarchingSquares_buildSolid(ClassInstance, boolPoints, boolInversePoints, w, h);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_buildSolid (IntPtr classInstance, IntPtr boolPoints, IntPtr boolInversePoints, int w, int h);
		public void CollectEdges ()
		{
			llge_MarchingSquares_collectEdges(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_collectEdges (IntPtr classInstance);
		public void SimplifyPathes (int tolerance)
		{
			llge_MarchingSquares_simplifyPathes(ClassInstance, tolerance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_simplifyPathes (IntPtr classInstance, int tolerance);
		public void TriangulatePathes ()
		{
			llge_MarchingSquares_triangulatePathes(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_triangulatePathes (IntPtr classInstance);
		public IntPtr GetEdges ()
		{
			return llge_MarchingSquares_getEdges(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getEdges (IntPtr classInstance);
		public int GetEdgesCount ()
		{
			return llge_MarchingSquares_getEdgesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getEdgesCount (IntPtr classInstance);
		public int GetPathesCount ()
		{
			return llge_MarchingSquares_getPathesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getPathesCount (IntPtr classInstance);
		public int GetPathCount (int pathIndex)
		{
			return llge_MarchingSquares_getPathCount(ClassInstance, pathIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getPathCount (IntPtr classInstance, int pathIndex);
		public IntPtr GetPath (int pathIndex)
		{
			return llge_MarchingSquares_getPath(ClassInstance, pathIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getPath (IntPtr classInstance, int pathIndex);
		public int GetVerticesCount ()
		{
			return llge_MarchingSquares_getVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getVerticesCount (IntPtr classInstance);
		public IntPtr GetVertices ()
		{
			return llge_MarchingSquares_getVertices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getVertices (IntPtr classInstance);
		public int GetIndicesCount ()
		{
			return llge_MarchingSquares_getIndicesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getIndicesCount (IntPtr classInstance);
		public IntPtr GetIndices ()
		{
			return llge_MarchingSquares_getIndices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getIndices (IntPtr classInstance);
		public int GetSolidVerticesCount ()
		{
			return llge_MarchingSquares_getSolidVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getSolidVerticesCount (IntPtr classInstance);
		public IntPtr GetSolidVertices ()
		{
			return llge_MarchingSquares_getSolidVertices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getSolidVertices (IntPtr classInstance);
		public int GetSolidIndicesCount ()
		{
			return llge_MarchingSquares_getSolidIndicesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getSolidIndicesCount (IntPtr classInstance);
		public IntPtr GetSolidIndices ()
		{
			return llge_MarchingSquares_getSolidIndices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getSolidIndices (IntPtr classInstance);
		public int GetBlendVerticesCount ()
		{
			return llge_MarchingSquares_getBlendVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getBlendVerticesCount (IntPtr classInstance);
		public IntPtr GetBlendVertices ()
		{
			return llge_MarchingSquares_getBlendVertices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getBlendVertices (IntPtr classInstance);
		public int GetBlendIndicesCount ()
		{
			return llge_MarchingSquares_getBlendIndicesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MarchingSquares_getBlendIndicesCount (IntPtr classInstance);
		public IntPtr GetBlendIndices ()
		{
			return llge_MarchingSquares_getBlendIndices(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_MarchingSquares_getBlendIndices (IntPtr classInstance);
		public void Dispose ()
		{
			llge_MarchingSquares_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MarchingSquares_dispose (IntPtr classInstance);
	}
	
	public class MeshesResult
	{
		public IntPtr ClassInstance;
		public int GetMeshesCount ()
		{
			return llge_MeshesResult_getMeshesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MeshesResult_getMeshesCount (IntPtr classInstance);
		public int GetMeshType (int meshIndex)
		{
			return llge_MeshesResult_getMeshType(ClassInstance, meshIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MeshesResult_getMeshType (IntPtr classInstance, int meshIndex);
		public int GetVerticesCount (int meshIndex)
		{
			return llge_MeshesResult_getVerticesCount(ClassInstance, meshIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MeshesResult_getVerticesCount (IntPtr classInstance, int meshIndex);
		public int GetIndicesCount (int meshIndex)
		{
			return llge_MeshesResult_getIndicesCount(ClassInstance, meshIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_MeshesResult_getIndicesCount (IntPtr classInstance, int meshIndex);
		public void GetVertices (int meshIndex, IntPtr vertices)
		{
			llge_MeshesResult_getVertices(ClassInstance, meshIndex, vertices);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MeshesResult_getVertices (IntPtr classInstance, int meshIndex, IntPtr vertices);
		public void GetIndices (int meshIndex, IntPtr indices)
		{
			llge_MeshesResult_getIndices(ClassInstance, meshIndex, indices);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_MeshesResult_getIndices (IntPtr classInstance, int meshIndex, IntPtr indices);
	}
	
	public class P2t
	{
		public IntPtr ClassInstance;
		public void SetContour (IntPtr vertices2f, uint count)
		{
			llge_P2t_setContour(ClassInstance, vertices2f, count);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_P2t_setContour (IntPtr classInstance, IntPtr vertices2f, uint count);
		public void AddHole (IntPtr vertices2f, uint count)
		{
			llge_P2t_addHole(ClassInstance, vertices2f, count);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_P2t_addHole (IntPtr classInstance, IntPtr vertices2f, uint count);
		public void Build ()
		{
			llge_P2t_build(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_P2t_build (IntPtr classInstance);
		public void BuildContour (IntPtr vertices2f, uint count)
		{
			llge_P2t_buildContour(ClassInstance, vertices2f, count);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_P2t_buildContour (IntPtr classInstance, IntPtr vertices2f, uint count);
		public int GetTrianglesCount ()
		{
			return llge_P2t_getTrianglesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_P2t_getTrianglesCount (IntPtr classInstance);
		public void GetTriangles (IntPtr triangles)
		{
			llge_P2t_getTriangles(ClassInstance, triangles);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_P2t_getTriangles (IntPtr classInstance, IntPtr triangles);
	}
	
	public class TerrainClipper
	{
		public IntPtr ClassInstance;
		public void ClearClipper ()
		{
			llge_TerrainClipper_clearClipper(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainClipper_clearClipper (IntPtr classInstance);
		public void AddClipperContour (IntPtr vertices2f, uint count)
		{
			llge_TerrainClipper_addClipperContour(ClassInstance, vertices2f, count);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainClipper_addClipperContour (IntPtr classInstance, IntPtr vertices2f, uint count);
		public void BuildClipper (int sizeX, int sizeY, int detailX, int detailY, bool createDifference)
		{
			llge_TerrainClipper_buildClipper(ClassInstance, sizeX, sizeY, detailX, detailY, createDifference);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainClipper_buildClipper (IntPtr classInstance, int sizeX, int sizeY, int detailX, int detailY, bool createDifference);
		public MeshesResult GetIntersectionResult ()
		{
			return new MeshesResult{ ClassInstance = llge_TerrainClipper_getIntersectionResult(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TerrainClipper_getIntersectionResult (IntPtr classInstance);
		public MeshesResult GetDifferenceResult ()
		{
			return new MeshesResult{ ClassInstance = llge_TerrainClipper_getDifferenceResult(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TerrainClipper_getDifferenceResult (IntPtr classInstance);
		public void Dispose ()
		{
			llge_TerrainClipper_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainClipper_dispose (IntPtr classInstance);
	}
	
	public class GeometryFactory
	{
		public IntPtr ClassInstance;
		public MarchingSquares CreateMarchingSquares ()
		{
			return new MarchingSquares{ ClassInstance = llge_GeometryFactory_createMarchingSquares(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GeometryFactory_createMarchingSquares (IntPtr classInstance);
		public TerrainClipper CreateTerrainClipper ()
		{
			return new TerrainClipper{ ClassInstance = llge_GeometryFactory_createTerrainClipper(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GeometryFactory_createTerrainClipper (IntPtr classInstance);
		public P2t CreateP2t ()
		{
			return new P2t{ ClassInstance = llge_GeometryFactory_createP2t(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_GeometryFactory_createP2t (IntPtr classInstance);
		public void Dispose ()
		{
			llge_GeometryFactory_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_GeometryFactory_dispose (IntPtr classInstance);
	}
	
	public class Batch2d
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_Batch2d_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_Batch2d_getNativeInstance (IntPtr classInstance);
		public void SetLightingMode (BatcherLightingMode mode)
		{
			llge_Batch2d_setLightingMode(ClassInstance, mode);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_setLightingMode (IntPtr classInstance, BatcherLightingMode mode);
		public void AddProjection (IntPtr floatMatrix)
		{
			llge_Batch2d_addProjection(ClassInstance, floatMatrix);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_addProjection (IntPtr classInstance, IntPtr floatMatrix);
		public void AddRenderTarget (IntPtr renderTargetInstance)
		{
			llge_Batch2d_addRenderTarget(ClassInstance, renderTargetInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_addRenderTarget (IntPtr classInstance, IntPtr renderTargetInstance);
		public void SetupLighting (IntPtr lightingConfig)
		{
			llge_Batch2d_setupLighting(ClassInstance, lightingConfig);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_setupLighting (IntPtr classInstance, IntPtr lightingConfig);
		public void StartBatch ()
		{
			llge_Batch2d_startBatch(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_startBatch (IntPtr classInstance);
		public void FinishBatch ()
		{
			llge_Batch2d_finishBatch(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_finishBatch (IntPtr classInstance);
		public void SetToneMap (uint tonemapId)
		{
			llge_Batch2d_setToneMap(ClassInstance, tonemapId);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_setToneMap (IntPtr classInstance, uint tonemapId);
		public void Draw (IntPtr batcherConfig, IntPtr texturesConfig)
		{
			llge_Batch2d_draw(ClassInstance, batcherConfig, texturesConfig);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_draw (IntPtr classInstance, IntPtr batcherConfig, IntPtr texturesConfig);
		public void DrawSolid (int z, Texture textureId, uint lightmapId, IntPtr vertices, int verticesCount, IntPtr indices, int indicesCount, byte colorScale)
		{
			llge_Batch2d_drawSolid(ClassInstance, z, textureId.ClassInstance, lightmapId, vertices, verticesCount, indices, indicesCount, colorScale);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_drawSolid (IntPtr classInstance, int z, IntPtr textureId, uint lightmapId, IntPtr vertices, int verticesCount, IntPtr indices, int indicesCount, byte colorScale);
		public void DrawMask (byte mask, IntPtr vertices, int verticesCount, IntPtr indices, int indicesCount)
		{
			llge_Batch2d_drawMask(ClassInstance, mask, vertices, verticesCount, indices, indicesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_drawMask (IntPtr classInstance, byte mask, IntPtr vertices, int verticesCount, IntPtr indices, int indicesCount);
		public void SetMask (byte mask)
		{
			llge_Batch2d_setMask(ClassInstance, mask);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_setMask (IntPtr classInstance, byte mask);
		public void Execute (bool usePostProcess)
		{
			llge_Batch2d_execute(ClassInstance, usePostProcess);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_execute (IntPtr classInstance, bool usePostProcess);
		public void SetBatcherMode (BatcherMode mode)
		{
			llge_Batch2d_setBatcherMode(ClassInstance, mode);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_Batch2d_setBatcherMode (IntPtr classInstance, BatcherMode mode);
		public int GetRenderedVerticesCount ()
		{
			return llge_Batch2d_getRenderedVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_Batch2d_getRenderedVerticesCount (IntPtr classInstance);
		public int GetRenderedPrimitivesCount ()
		{
			return llge_Batch2d_getRenderedPrimitivesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_Batch2d_getRenderedPrimitivesCount (IntPtr classInstance);
	}
	
	public class SpineSkeletonBone
	{
		public IntPtr ClassInstance;
		public IntPtr GetName ()
		{
			return llge_SpineSkeletonBone_getName(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineSkeletonBone_getName (IntPtr classInstance);
		public float GetX ()
		{
			return llge_SpineSkeletonBone_getX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeletonBone_getX (IntPtr classInstance);
		public float GetY ()
		{
			return llge_SpineSkeletonBone_getY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeletonBone_getY (IntPtr classInstance);
		public void SetBoneFx (BoneFx fx)
		{
			llge_SpineSkeletonBone_setBoneFx(ClassInstance, fx);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeletonBone_setBoneFx (IntPtr classInstance, BoneFx fx);
		public void SetBoneRgbTransfomrIndex (int index)
		{
			llge_SpineSkeletonBone_setBoneRgbTransfomrIndex(ClassInstance, index);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeletonBone_setBoneRgbTransfomrIndex (IntPtr classInstance, int index);
	}
	
	public class SpineSkeleton
	{
		public IntPtr ClassInstance;
		public float GetBoundsVertexX (int boundsIndex, int vertexIndex)
		{
			return llge_SpineSkeleton_getBoundsVertexX(ClassInstance, boundsIndex, vertexIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getBoundsVertexX (IntPtr classInstance, int boundsIndex, int vertexIndex);
		public float GetBoundsVertexY (int boundsIndex, int vertexIndex)
		{
			return llge_SpineSkeleton_getBoundsVertexY(ClassInstance, boundsIndex, vertexIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getBoundsVertexY (IntPtr classInstance, int boundsIndex, int vertexIndex);
		public int GetBoundsVerticesCount (int boundsIndex)
		{
			return llge_SpineSkeleton_getBoundsVerticesCount(ClassInstance, boundsIndex);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineSkeleton_getBoundsVerticesCount (IntPtr classInstance, int boundsIndex);
		public int GetBoundsCount ()
		{
			return llge_SpineSkeleton_getBoundsCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineSkeleton_getBoundsCount (IntPtr classInstance);
		public SpineSkeletonBone GetBone (int index)
		{
			return new SpineSkeletonBone{ ClassInstance = llge_SpineSkeleton_getBone(ClassInstance, index) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineSkeleton_getBone (IntPtr classInstance, int index);
		public int GetBonesCount ()
		{
			return llge_SpineSkeleton_getBonesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineSkeleton_getBonesCount (IntPtr classInstance);
		public void SetTransform (IntPtr floatMatrix)
		{
			llge_SpineSkeleton_setTransform(ClassInstance, floatMatrix);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setTransform (IntPtr classInstance, IntPtr floatMatrix);
		public void SetColor (uint color)
		{
			llge_SpineSkeleton_setColor(ClassInstance, color);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setColor (IntPtr classInstance, uint color);
		public float GetMinX ()
		{
			return llge_SpineSkeleton_getMinX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getMinX (IntPtr classInstance);
		public float GetMinY ()
		{
			return llge_SpineSkeleton_getMinY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getMinY (IntPtr classInstance);
		public float GetMaxX ()
		{
			return llge_SpineSkeleton_getMaxX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getMaxX (IntPtr classInstance);
		public float GetMaxY ()
		{
			return llge_SpineSkeleton_getMaxY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getMaxY (IntPtr classInstance);
		public float GetZ ()
		{
			return llge_SpineSkeleton_getZ(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineSkeleton_getZ (IntPtr classInstance);
		public void RenderEx (Batch2d batch, IntPtr effectConfig, GraphicsEffects effect, byte colorScale)
		{
			llge_SpineSkeleton_renderEx(ClassInstance, batch.ClassInstance, effectConfig, effect, colorScale);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_renderEx (IntPtr classInstance, IntPtr batch, IntPtr effectConfig, GraphicsEffects effect, byte colorScale);
		public void RenderWithoutBatch ()
		{
			llge_SpineSkeleton_renderWithoutBatch(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_renderWithoutBatch (IntPtr classInstance);
		public int GetGeometry (IntPtr vertices, int verticeLimit, IntPtr indices, int indicesLimit)
		{
			return llge_SpineSkeleton_getGeometry(ClassInstance, vertices, verticeLimit, indices, indicesLimit);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineSkeleton_getGeometry (IntPtr classInstance, IntPtr vertices, int verticeLimit, IntPtr indices, int indicesLimit);
		public IntPtr GetNativeInstance ()
		{
			return llge_SpineSkeleton_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineSkeleton_getNativeInstance (IntPtr classInstance);
		public void UpdateWorldTransform ()
		{
			llge_SpineSkeleton_updateWorldTransform(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_updateWorldTransform (IntPtr classInstance);
		public void SetBonesToSetupPose ()
		{
			llge_SpineSkeleton_setBonesToSetupPose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setBonesToSetupPose (IntPtr classInstance);
		public void SetSlotsToSetupPose ()
		{
			llge_SpineSkeleton_setSlotsToSetupPose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setSlotsToSetupPose (IntPtr classInstance);
		public void ApplySkin (IntPtr spineSkinNativeInstance)
		{
			llge_SpineSkeleton_applySkin(ClassInstance, spineSkinNativeInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_applySkin (IntPtr classInstance, IntPtr spineSkinNativeInstance);
		public void SetRgbTransform (int index, IntPtr floatMatrix3)
		{
			llge_SpineSkeleton_setRgbTransform(ClassInstance, index, floatMatrix3);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setRgbTransform (IntPtr classInstance, int index, IntPtr floatMatrix3);
		public void SetDefaultRgbTransform (int index)
		{
			llge_SpineSkeleton_setDefaultRgbTransform(ClassInstance, index);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_setDefaultRgbTransform (IntPtr classInstance, int index);
		public void Dispose ()
		{
			llge_SpineSkeleton_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineSkeleton_dispose (IntPtr classInstance);
	}
	
	public class SpineSkin
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_SpineSkin_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineSkin_getNativeInstance (IntPtr classInstance);
		public IntPtr GetName ()
		{
			return llge_SpineSkin_getName(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineSkin_getName (IntPtr classInstance);
	}
	
	public class SpineDynamicSkin
	{
		public IntPtr ClassInstance;
		public SpineSkin SkinValue ()
		{
			return new SpineSkin{ ClassInstance = llge_SpineDynamicSkin_skinValue(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineDynamicSkin_skinValue (IntPtr classInstance);
		public void AddSkin (SpineSkin skin)
		{
			llge_SpineDynamicSkin_addSkin(ClassInstance, skin.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineDynamicSkin_addSkin (IntPtr classInstance, IntPtr skin);
	}
	
	public class SpineAnimation
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_SpineAnimation_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineAnimation_getNativeInstance (IntPtr classInstance);
		public IntPtr GetName ()
		{
			return llge_SpineAnimation_getName(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineAnimation_getName (IntPtr classInstance);
		public float GetDuration ()
		{
			return llge_SpineAnimation_getDuration(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineAnimation_getDuration (IntPtr classInstance);
	}
	
	public class SpineAnimationState
	{
		public IntPtr ClassInstance;
		public float GetTime ()
		{
			return llge_SpineAnimationState_getTime(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_SpineAnimationState_getTime (IntPtr classInstance);
		public void SetTime (float time)
		{
			llge_SpineAnimationState_setTime(ClassInstance, time);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_setTime (IntPtr classInstance, float time);
		public void Update (float delta)
		{
			llge_SpineAnimationState_update(ClassInstance, delta);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_update (IntPtr classInstance, float delta);
		public void Apply (SpineSkeleton skeleton)
		{
			llge_SpineAnimationState_apply(ClassInstance, skeleton.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_apply (IntPtr classInstance, IntPtr skeleton);
		public void SetAnimation (SpineAnimation animation, bool loop, bool normalize)
		{
			llge_SpineAnimationState_setAnimation(ClassInstance, animation.ClassInstance, loop, normalize);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_setAnimation (IntPtr classInstance, IntPtr animation, bool loop, bool normalize);
		public void AddAnimation (SpineAnimation animation, bool loop, float delay)
		{
			llge_SpineAnimationState_addAnimation(ClassInstance, animation.ClassInstance, loop, delay);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_addAnimation (IntPtr classInstance, IntPtr animation, bool loop, float delay);
		public int GetSpineEventIndices (IntPtr indices, int limit)
		{
			return llge_SpineAnimationState_getSpineEventIndices(ClassInstance, indices, limit);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineAnimationState_getSpineEventIndices (IntPtr classInstance, IntPtr indices, int limit);
		public int GetSpineEventsLimit ()
		{
			return llge_SpineAnimationState_getSpineEventsLimit(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineAnimationState_getSpineEventsLimit (IntPtr classInstance);
		public void Dispose ()
		{
			llge_SpineAnimationState_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationState_dispose (IntPtr classInstance);
	}
	
	public class SpineAnimationStateData
	{
		public IntPtr ClassInstance;
		public void SetMix (SpineAnimation from, SpineAnimation to, float time)
		{
			llge_SpineAnimationStateData_setMix(ClassInstance, from.ClassInstance, to.ClassInstance, time);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationStateData_setMix (IntPtr classInstance, IntPtr from, IntPtr to, float time);
		public SpineAnimationState CreateState ()
		{
			return new SpineAnimationState{ ClassInstance = llge_SpineAnimationStateData_createState(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineAnimationStateData_createState (IntPtr classInstance);
		public void Dispose ()
		{
			llge_SpineAnimationStateData_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineAnimationStateData_dispose (IntPtr classInstance);
	}
	
	public class SpineEvent
	{
		public IntPtr ClassInstance;
		public IntPtr GetName ()
		{
			return llge_SpineEvent_getName(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineEvent_getName (IntPtr classInstance);
	}
	
	public class SpineResource
	{
		public IntPtr ClassInstance;
		public void Load (String atlasText, String jsonText, String dir, TextureQueryFormat format, float applyedCompression)
		{
			llge_SpineResource_load(ClassInstance, atlasText, jsonText, dir, format, applyedCompression);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineResource_load (IntPtr classInstance, String atlasText, String jsonText, String dir, TextureQueryFormat format, float applyedCompression);
		public void LoadWithPngImage (String atlasText, String jsonText, String dir, IntPtr texture)
		{
			llge_SpineResource_loadWithPngImage(ClassInstance, atlasText, jsonText, dir, texture);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineResource_loadWithPngImage (IntPtr classInstance, String atlasText, String jsonText, String dir, IntPtr texture);
		public void UnLoad ()
		{
			llge_SpineResource_unLoad(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineResource_unLoad (IntPtr classInstance);
		public SpineAnimation GetSpineAnimation (int i)
		{
			return new SpineAnimation{ ClassInstance = llge_SpineResource_getSpineAnimation(ClassInstance, i) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_getSpineAnimation (IntPtr classInstance, int i);
		public int GetSpineAnimationsCount ()
		{
			return llge_SpineResource_getSpineAnimationsCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineResource_getSpineAnimationsCount (IntPtr classInstance);
		public SpineSkin GetSpineSkin (int i)
		{
			return new SpineSkin{ ClassInstance = llge_SpineResource_getSpineSkin(ClassInstance, i) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_getSpineSkin (IntPtr classInstance, int i);
		public int GetSpineSkinsCount ()
		{
			return llge_SpineResource_getSpineSkinsCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineResource_getSpineSkinsCount (IntPtr classInstance);
		public SpineEvent GetSpineEvent (int i)
		{
			return new SpineEvent{ ClassInstance = llge_SpineResource_getSpineEvent(ClassInstance, i) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_getSpineEvent (IntPtr classInstance, int i);
		public int GetSpineEventsCount ()
		{
			return llge_SpineResource_getSpineEventsCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_SpineResource_getSpineEventsCount (IntPtr classInstance);
		public SpineSkeleton CreateSkeleton (IntPtr floatMatrix)
		{
			return new SpineSkeleton{ ClassInstance = llge_SpineResource_createSkeleton(ClassInstance, floatMatrix) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_createSkeleton (IntPtr classInstance, IntPtr floatMatrix);
		public SpineAnimationStateData CreateStateData ()
		{
			return new SpineAnimationStateData{ ClassInstance = llge_SpineResource_createStateData(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_createStateData (IntPtr classInstance);
		public IntPtr ErrorMessage ()
		{
			return llge_SpineResource_errorMessage(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_errorMessage (IntPtr classInstance);
		public bool IsValid ()
		{
			return llge_SpineResource_isValid(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_SpineResource_isValid (IntPtr classInstance);
		public SpineDynamicSkin CreateDynamicSkin ()
		{
			return new SpineDynamicSkin{ ClassInstance = llge_SpineResource_createDynamicSkin(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_createDynamicSkin (IntPtr classInstance);
		public SpineSkin GetDefaultSkin ()
		{
			return new SpineSkin{ ClassInstance = llge_SpineResource_getDefaultSkin(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_SpineResource_getDefaultSkin (IntPtr classInstance);
		public void Dispose ()
		{
			llge_SpineResource_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_SpineResource_dispose (IntPtr classInstance);
	}
	
	public class NativeMemoryProfiler
	{
		public IntPtr ClassInstance;
		public int GetTexturesSize ()
		{
			return llge_NativeMemoryProfiler_getTexturesSize(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_NativeMemoryProfiler_getTexturesSize (IntPtr classInstance);
		public int GetAllocationsSize ()
		{
			return llge_NativeMemoryProfiler_getAllocationsSize(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_NativeMemoryProfiler_getAllocationsSize (IntPtr classInstance);
		public int GetHeapSize ()
		{
			return llge_NativeMemoryProfiler_getHeapSize(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_NativeMemoryProfiler_getHeapSize (IntPtr classInstance);
	}
	
	public class TextureBuffer2d
	{
		public IntPtr ClassInstance;
		public TextureImage2dFormat GetFormat ()
		{
			return llge_TextureBuffer2d_getFormat(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private TextureImage2dFormat llge_TextureBuffer2d_getFormat (IntPtr classInstance);
		public int GetWidth ()
		{
			return llge_TextureBuffer2d_getWidth(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TextureBuffer2d_getWidth (IntPtr classInstance);
		public int GetHeight ()
		{
			return llge_TextureBuffer2d_getHeight(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TextureBuffer2d_getHeight (IntPtr classInstance);
		public IntPtr GetPixels ()
		{
			return llge_TextureBuffer2d_getPixels(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TextureBuffer2d_getPixels (IntPtr classInstance);
	}
	
	public class ContentAtlasMap
	{
		public IntPtr ClassInstance;
		public void ResetMap ()
		{
			llge_ContentAtlasMap_resetMap(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentAtlasMap_resetMap (IntPtr classInstance);
		public void AddRect (string name, int pageIndex, int x, int y, int width, int height)
		{
			llge_ContentAtlasMap_addRect(ClassInstance, name, pageIndex, x, y, width, height);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentAtlasMap_addRect (IntPtr classInstance, string name, int pageIndex, int x, int y, int width, int height);
		public void LoadTextures ()
		{
			llge_ContentAtlasMap_loadTextures(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentAtlasMap_loadTextures (IntPtr classInstance);
	}
	
	public class ContentProvider
	{
		public IntPtr ClassInstance;
		public bool ExistsContent (string name)
		{
			return llge_ContentProvider_existsContent(ClassInstance, name);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_ContentProvider_existsContent (IntPtr classInstance, string name);
		public void OpenContent (string name)
		{
			llge_ContentProvider_openContent(ClassInstance, name);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentProvider_openContent (IntPtr classInstance, string name);
		public int Read (IntPtr buffer, int bytesLimit)
		{
			return llge_ContentProvider_read(ClassInstance, buffer, bytesLimit);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_ContentProvider_read (IntPtr classInstance, IntPtr buffer, int bytesLimit);
		public void CloseContent ()
		{
			llge_ContentProvider_closeContent(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentProvider_closeContent (IntPtr classInstance);
	}
	
	public class ContentManager
	{
		public IntPtr ClassInstance;
		public ContentProvider GetContentProvider ()
		{
			return new ContentProvider{ ClassInstance = llge_ContentManager_getContentProvider(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_ContentManager_getContentProvider (IntPtr classInstance);
		public ContentAtlasMap GetContentAtlasMap ()
		{
			return new ContentAtlasMap{ ClassInstance = llge_ContentManager_getContentAtlasMap(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_ContentManager_getContentAtlasMap (IntPtr classInstance);
		public void UseCompression (TextureImage2dFormat format)
		{
			llge_ContentManager_useCompression(ClassInstance, format);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_useCompression (IntPtr classInstance, TextureImage2dFormat format);
		public void ReplaceSeparator (bool value)
		{
			llge_ContentManager_replaceSeparator(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_replaceSeparator (IntPtr classInstance, bool value);
		public int RegisterImage (string name)
		{
			return llge_ContentManager_registerImage(ClassInstance, name);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_ContentManager_registerImage (IntPtr classInstance, string name);
		public void StartLoad ()
		{
			llge_ContentManager_startLoad(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_startLoad (IntPtr classInstance);
		public void StartAtlasBuild ()
		{
			llge_ContentManager_startAtlasBuild(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_startAtlasBuild (IntPtr classInstance);
		public void FinishAtlasBuild ()
		{
			llge_ContentManager_finishAtlasBuild(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_finishAtlasBuild (IntPtr classInstance);
		public void LoadImage (int id, TextureImage2d textureImage, int w, int h, TextureQueryFormat queryFormat)
		{
			llge_ContentManager_loadImage(ClassInstance, id, textureImage.ClassInstance, w, h, queryFormat);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_loadImage (IntPtr classInstance, int id, IntPtr textureImage, int w, int h, TextureQueryFormat queryFormat);
		public TextureBuffer2d LoadBuffer (int id)
		{
			return new TextureBuffer2d{ ClassInstance = llge_ContentManager_loadBuffer(ClassInstance, id) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_ContentManager_loadBuffer (IntPtr classInstance, int id);
		public void FinishLoad ()
		{
			llge_ContentManager_finishLoad(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_finishLoad (IntPtr classInstance);
		public bool Update ()
		{
			return llge_ContentManager_update(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_ContentManager_update (IntPtr classInstance);
		public void Dispose ()
		{
			llge_ContentManager_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ContentManager_dispose (IntPtr classInstance);
	}
	
	public class ObbContentProvider
	{
		public IntPtr ClassInstance;
		public void RefreshAssetsManager (IntPtr jniEnv, IntPtr assetsManager)
		{
			llge_ObbContentProvider_refreshAssetsManager(ClassInstance, jniEnv, assetsManager);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_refreshAssetsManager (IntPtr classInstance, IntPtr jniEnv, IntPtr assetsManager);
		public void OpenAssets (IntPtr jniEnv, IntPtr assetsManager)
		{
			llge_ObbContentProvider_openAssets(ClassInstance, jniEnv, assetsManager);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_openAssets (IntPtr classInstance, IntPtr jniEnv, IntPtr assetsManager);
		public void RemapObbFile (string obbFile)
		{
			llge_ObbContentProvider_remapObbFile(ClassInstance, obbFile);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_remapObbFile (IntPtr classInstance, string obbFile);
		public void OpenObbFile (string obbFile)
		{
			llge_ObbContentProvider_openObbFile(ClassInstance, obbFile);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_openObbFile (IntPtr classInstance, string obbFile);
		public void CloseObbFile ()
		{
			llge_ObbContentProvider_closeObbFile(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_closeObbFile (IntPtr classInstance);
		public bool ExistsContent (string name)
		{
			return llge_ObbContentProvider_existsContent(ClassInstance, name);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_ObbContentProvider_existsContent (IntPtr classInstance, string name);
		public void OpenContent (string name)
		{
			llge_ObbContentProvider_openContent(ClassInstance, name);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_openContent (IntPtr classInstance, string name);
		public int Read (IntPtr buffer, int bytesLimit)
		{
			return llge_ObbContentProvider_read(ClassInstance, buffer, bytesLimit);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_ObbContentProvider_read (IntPtr classInstance, IntPtr buffer, int bytesLimit);
		public int GetContentSize ()
		{
			return llge_ObbContentProvider_getContentSize(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_ObbContentProvider_getContentSize (IntPtr classInstance);
		public void CloseContent ()
		{
			llge_ObbContentProvider_closeContent(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_ObbContentProvider_closeContent (IntPtr classInstance);
	}
	
	public class NavMeshConfig
	{
		public IntPtr ClassInstance;
		public void Clear ()
		{
			llge_NavMeshConfig_clear(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMeshConfig_clear (IntPtr classInstance);
		public void AddPolygon (IntPtr vertices2f, uint verticesCount)
		{
			llge_NavMeshConfig_addPolygon(ClassInstance, vertices2f, verticesCount);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMeshConfig_addPolygon (IntPtr classInstance, IntPtr vertices2f, uint verticesCount);
		public IntPtr GetNativeInstance ()
		{
			return llge_NavMeshConfig_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_NavMeshConfig_getNativeInstance (IntPtr classInstance);
		public void Dispose ()
		{
			llge_NavMeshConfig_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMeshConfig_dispose (IntPtr classInstance);
	}
	
	public class NavPath
	{
		public IntPtr ClassInstance;
		public int GetVerticesCount ()
		{
			return llge_NavPath_getVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_NavPath_getVerticesCount (IntPtr classInstance);
		public void GetVertices (IntPtr vertices2f)
		{
			llge_NavPath_getVertices(ClassInstance, vertices2f);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavPath_getVertices (IntPtr classInstance, IntPtr vertices2f);
		public IntPtr GetNativeInstance ()
		{
			return llge_NavPath_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_NavPath_getNativeInstance (IntPtr classInstance);
	}
	
	public class PathMesh
	{
		public IntPtr ClassInstance;
		public void FillNavPath (NavPath path)
		{
			llge_PathMesh_fillNavPath(ClassInstance, path.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PathMesh_fillNavPath (IntPtr classInstance, IntPtr path);
		public int GetTriagnlesCount ()
		{
			return llge_PathMesh_getTriagnlesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_PathMesh_getTriagnlesCount (IntPtr classInstance);
		public void GetTriagnles (IntPtr triangles3f)
		{
			llge_PathMesh_getTriagnles(ClassInstance, triangles3f);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PathMesh_getTriagnles (IntPtr classInstance, IntPtr triangles3f);
		public IntPtr GetNativeInstance ()
		{
			return llge_PathMesh_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PathMesh_getNativeInstance (IntPtr classInstance);
		public void Dispose ()
		{
			llge_PathMesh_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PathMesh_dispose (IntPtr classInstance);
	}
	
	public class NavMesh
	{
		public IntPtr ClassInstance;
		public void BuildNavMesh (NavMeshConfig config)
		{
			llge_NavMesh_buildNavMesh(ClassInstance, config.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMesh_buildNavMesh (IntPtr classInstance, IntPtr config);
		public int GetTriagnlesCount ()
		{
			return llge_NavMesh_getTriagnlesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_NavMesh_getTriagnlesCount (IntPtr classInstance);
		public void GetTriagnles (IntPtr triangles3f)
		{
			llge_NavMesh_getTriagnles(ClassInstance, triangles3f);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMesh_getTriagnles (IntPtr classInstance, IntPtr triangles3f);
		public void FillPathMesh (float x0, float y0, float x1, float y1, PathMesh mesh)
		{
			llge_NavMesh_fillPathMesh(ClassInstance, x0, y0, x1, y1, mesh.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMesh_fillPathMesh (IntPtr classInstance, float x0, float y0, float x1, float y1, IntPtr mesh);
		public void Dispose ()
		{
			llge_NavMesh_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_NavMesh_dispose (IntPtr classInstance);
	}
	
	public class PhysicalShape
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_PhysicalShape_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalShape_getNativeInstance (IntPtr classInstance);
		public void Dispose ()
		{
			llge_PhysicalShape_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalShape_dispose (IntPtr classInstance);
	}
	
	public class PhysicalFixture
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_PhysicalFixture_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFixture_getNativeInstance (IntPtr classInstance);
		public bool TestPolygonOverlap (float x, float y, IntPtr polygon2f, uint count)
		{
			return llge_PhysicalFixture_testPolygonOverlap(ClassInstance, x, y, polygon2f, count);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalFixture_testPolygonOverlap (IntPtr classInstance, float x, float y, IntPtr polygon2f, uint count);
		public bool TestOverlap (PhysicalFixture fixture)
		{
			return llge_PhysicalFixture_testOverlap(ClassInstance, fixture.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalFixture_testOverlap (IntPtr classInstance, IntPtr fixture);
		public bool TestPolygonOverlapEx (float x, float y, IntPtr polygon2f, uint count, IntPtr contactPoint)
		{
			return llge_PhysicalFixture_testPolygonOverlapEx(ClassInstance, x, y, polygon2f, count, contactPoint);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalFixture_testPolygonOverlapEx (IntPtr classInstance, float x, float y, IntPtr polygon2f, uint count, IntPtr contactPoint);
		public bool TestOverlapEx (PhysicalFixture fixture, IntPtr contactPoint)
		{
			return llge_PhysicalFixture_testOverlapEx(ClassInstance, fixture.ClassInstance, contactPoint);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalFixture_testOverlapEx (IntPtr classInstance, IntPtr fixture, IntPtr contactPoint);
		public void PauseCollisions (uint group)
		{
			llge_PhysicalFixture_pauseCollisions(ClassInstance, group);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_pauseCollisions (IntPtr classInstance, uint group);
		public void ResumeCollisions ()
		{
			llge_PhysicalFixture_resumeCollisions(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_resumeCollisions (IntPtr classInstance);
		public int GetContactsCounter ()
		{
			return llge_PhysicalFixture_getContactsCounter(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_PhysicalFixture_getContactsCounter (IntPtr classInstance);
		public float GetDensity ()
		{
			return llge_PhysicalFixture_getDensity(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalFixture_getDensity (IntPtr classInstance);
		public float GetFriction ()
		{
			return llge_PhysicalFixture_getFriction(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalFixture_getFriction (IntPtr classInstance);
		public float GetBonce ()
		{
			return llge_PhysicalFixture_getBonce(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalFixture_getBonce (IntPtr classInstance);
		public bool IsSensor ()
		{
			return llge_PhysicalFixture_isSensor(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalFixture_isSensor (IntPtr classInstance);
		public uint GetCollidesWith ()
		{
			return llge_PhysicalFixture_getCollidesWith(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_PhysicalFixture_getCollidesWith (IntPtr classInstance);
		public uint GetCollisionGroup ()
		{
			return llge_PhysicalFixture_getCollisionGroup(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_PhysicalFixture_getCollisionGroup (IntPtr classInstance);
		public void SetDensity (float value)
		{
			llge_PhysicalFixture_setDensity(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setDensity (IntPtr classInstance, float value);
		public void SetFriction (float value)
		{
			llge_PhysicalFixture_setFriction(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setFriction (IntPtr classInstance, float value);
		public void SetBonce (float value)
		{
			llge_PhysicalFixture_setBonce(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setBonce (IntPtr classInstance, float value);
		public void SetSensor (bool value)
		{
			llge_PhysicalFixture_setSensor(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setSensor (IntPtr classInstance, bool value);
		public void SetCollidesWith (uint value)
		{
			llge_PhysicalFixture_setCollidesWith(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setCollidesWith (IntPtr classInstance, uint value);
		public void SetCollisionGroup (uint value)
		{
			llge_PhysicalFixture_setCollisionGroup(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setCollisionGroup (IntPtr classInstance, uint value);
		public void SetRaycastGroup (ushort value)
		{
			llge_PhysicalFixture_setRaycastGroup(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixture_setRaycastGroup (IntPtr classInstance, ushort value);
	}
	
	public class PhysicalContactIterator
	{
		public IntPtr ClassInstance;
		public void CalcWorldManifold ()
		{
			llge_PhysicalContactIterator_CalcWorldManifold(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalContactIterator_CalcWorldManifold (IntPtr classInstance);
		public float GetWorldNormalX ()
		{
			return llge_PhysicalContactIterator_getWorldNormalX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getWorldNormalX (IntPtr classInstance);
		public float GetWorldNormalY ()
		{
			return llge_PhysicalContactIterator_getWorldNormalY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getWorldNormalY (IntPtr classInstance);
		public bool IsEnabled ()
		{
			return llge_PhysicalContactIterator_isEnabled(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalContactIterator_isEnabled (IntPtr classInstance);
		public bool IsSensorA ()
		{
			return llge_PhysicalContactIterator_isSensorA(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalContactIterator_isSensorA (IntPtr classInstance);
		public uint GetCollisionGroupA ()
		{
			return llge_PhysicalContactIterator_getCollisionGroupA(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_PhysicalContactIterator_getCollisionGroupA (IntPtr classInstance);
		public IntPtr GetNativeBodyA ()
		{
			return llge_PhysicalContactIterator_getNativeBodyA(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalContactIterator_getNativeBodyA (IntPtr classInstance);
		public float GetNativeBodyAPositionX ()
		{
			return llge_PhysicalContactIterator_getNativeBodyAPositionX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getNativeBodyAPositionX (IntPtr classInstance);
		public float GetNativeBodyAPositionY ()
		{
			return llge_PhysicalContactIterator_getNativeBodyAPositionY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getNativeBodyAPositionY (IntPtr classInstance);
		public IntPtr GetNativeFixtureA ()
		{
			return llge_PhysicalContactIterator_getNativeFixtureA(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalContactIterator_getNativeFixtureA (IntPtr classInstance);
		public bool IsSensorB ()
		{
			return llge_PhysicalContactIterator_isSensorB(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalContactIterator_isSensorB (IntPtr classInstance);
		public uint GetCollisionGroupB ()
		{
			return llge_PhysicalContactIterator_getCollisionGroupB(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private uint llge_PhysicalContactIterator_getCollisionGroupB (IntPtr classInstance);
		public IntPtr GetNativeBodyB ()
		{
			return llge_PhysicalContactIterator_getNativeBodyB(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalContactIterator_getNativeBodyB (IntPtr classInstance);
		public float GetNativeBodyBPositionX ()
		{
			return llge_PhysicalContactIterator_getNativeBodyBPositionX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getNativeBodyBPositionX (IntPtr classInstance);
		public float GetNativeBodyBPositionY ()
		{
			return llge_PhysicalContactIterator_getNativeBodyBPositionY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalContactIterator_getNativeBodyBPositionY (IntPtr classInstance);
		public IntPtr GetNativeFixtureB ()
		{
			return llge_PhysicalContactIterator_getNativeFixtureB(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalContactIterator_getNativeFixtureB (IntPtr classInstance);
		public void Reset ()
		{
			llge_PhysicalContactIterator_reset(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalContactIterator_reset (IntPtr classInstance);
		public bool IsEnd ()
		{
			return llge_PhysicalContactIterator_isEnd(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalContactIterator_isEnd (IntPtr classInstance);
		public void Next ()
		{
			llge_PhysicalContactIterator_next(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalContactIterator_next (IntPtr classInstance);
	}
	
	public class PhysicalBody
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_PhysicalBody_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_getNativeInstance (IntPtr classInstance);
		public float GetVelocityX ()
		{
			return llge_PhysicalBody_getVelocityX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalBody_getVelocityX (IntPtr classInstance);
		public float GetVelocityY ()
		{
			return llge_PhysicalBody_getVelocityY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalBody_getVelocityY (IntPtr classInstance);
		public void SetVelocityX (float x)
		{
			llge_PhysicalBody_setVelocityX(ClassInstance, x);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalBody_setVelocityX (IntPtr classInstance, float x);
		public void SetVelocityY (float y)
		{
			llge_PhysicalBody_setVelocityY(ClassInstance, y);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalBody_setVelocityY (IntPtr classInstance, float y);
		public float GetX ()
		{
			return llge_PhysicalBody_getX(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalBody_getX (IntPtr classInstance);
		public float GetY ()
		{
			return llge_PhysicalBody_getY(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalBody_getY (IntPtr classInstance);
		public void SetX (float x)
		{
			llge_PhysicalBody_setX(ClassInstance, x);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalBody_setX (IntPtr classInstance, float x);
		public void SetY (float y)
		{
			llge_PhysicalBody_setY(ClassInstance, y);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalBody_setY (IntPtr classInstance, float y);
		public float GetRotation ()
		{
			return llge_PhysicalBody_getRotation(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float llge_PhysicalBody_getRotation (IntPtr classInstance);
		public void SetRotation (float value)
		{
			llge_PhysicalBody_setRotation(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalBody_setRotation (IntPtr classInstance, float value);
		public PhysicalContactIterator GetContactIterator ()
		{
			return new PhysicalContactIterator{ ClassInstance = llge_PhysicalBody_getContactIterator(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_getContactIterator (IntPtr classInstance);
		public PhysicalFixture CreateEdgeFixture (float x0, float y0, float x1, float y1, PhysicsFixtureConfig config)
		{
			return new PhysicalFixture{ ClassInstance = llge_PhysicalBody_createEdgeFixture(ClassInstance, x0, y0, x1, y1, config) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_createEdgeFixture (IntPtr classInstance, float x0, float y0, float x1, float y1, PhysicsFixtureConfig config);
		public PhysicalFixture CreateCircleFixture (float x, float y, float r, PhysicsFixtureConfig config)
		{
			return new PhysicalFixture{ ClassInstance = llge_PhysicalBody_createCircleFixture(ClassInstance, x, y, r, config) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_createCircleFixture (IntPtr classInstance, float x, float y, float r, PhysicsFixtureConfig config);
		public PhysicalFixture CreateBoxFixture (float x, float y, float rx, float ry, float rotation, PhysicsFixtureConfig config)
		{
			return new PhysicalFixture{ ClassInstance = llge_PhysicalBody_createBoxFixture(ClassInstance, x, y, rx, ry, rotation, config) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_createBoxFixture (IntPtr classInstance, float x, float y, float rx, float ry, float rotation, PhysicsFixtureConfig config);
		public PhysicalFixture CreatePolygonFixture (IntPtr vertices2f, int count, PhysicsFixtureConfig config)
		{
			return new PhysicalFixture{ ClassInstance = llge_PhysicalBody_createPolygonFixture(ClassInstance, vertices2f, count, config) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalBody_createPolygonFixture (IntPtr classInstance, IntPtr vertices2f, int count, PhysicsFixtureConfig config);
	}
	
	public class PhysicalFixedJoint
	{
		public IntPtr ClassInstance;
		public IntPtr GetNativeInstance ()
		{
			return llge_PhysicalFixedJoint_getNativeInstance(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFixedJoint_getNativeInstance (IntPtr classInstance);
		public void SetJointTarget (float x, float y)
		{
			llge_PhysicalFixedJoint_setJointTarget(ClassInstance, x, y);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixedJoint_setJointTarget (IntPtr classInstance, float x, float y);
		public void SetJointMaxForce (float value)
		{
			llge_PhysicalFixedJoint_setJointMaxForce(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixedJoint_setJointMaxForce (IntPtr classInstance, float value);
		public void SetJointFrequency (float value)
		{
			llge_PhysicalFixedJoint_setJointFrequency(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixedJoint_setJointFrequency (IntPtr classInstance, float value);
		public void SetJointDampingRatio (float value)
		{
			llge_PhysicalFixedJoint_setJointDampingRatio(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFixedJoint_setJointDampingRatio (IntPtr classInstance, float value);
	}
	
	public class PhysicalWorld
	{
		public IntPtr ClassInstance;
		public void DebugRender (float x, float y, float rx, float ry)
		{
			llge_PhysicalWorld_debugRender(ClassInstance, x, y, rx, ry);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalWorld_debugRender (IntPtr classInstance, float x, float y, float rx, float ry);
		public bool MakeRayCastFirstEx (float x0, float y0, float x1, float y1, uint raycastMask, uint mask, bool ignoreSensors, IntPtr result)
		{
			return llge_PhysicalWorld_makeRayCastFirstEx(ClassInstance, x0, y0, x1, y1, raycastMask, mask, ignoreSensors, result);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalWorld_makeRayCastFirstEx (IntPtr classInstance, float x0, float y0, float x1, float y1, uint raycastMask, uint mask, bool ignoreSensors, IntPtr result);
		public bool MakeRayCastFirst (float x0, float y0, float x1, float y1, uint raycastMask, uint mask, bool ignoreSensors, IntPtr resultPoint, IntPtr resultNormal)
		{
			return llge_PhysicalWorld_makeRayCastFirst(ClassInstance, x0, y0, x1, y1, raycastMask, mask, ignoreSensors, resultPoint, resultNormal);
		}
		
		[DllImport(Version.Dll)]
		[return: MarshalAs(UnmanagedType.I1)]
		static extern private bool llge_PhysicalWorld_makeRayCastFirst (IntPtr classInstance, float x0, float y0, float x1, float y1, uint raycastMask, uint mask, bool ignoreSensors, IntPtr resultPoint, IntPtr resultNormal);
		public PhysicalBody CreatePhysicalBody (PhysicalBodyType type, float x, float y, float rotation, bool fixedRotation)
		{
			return new PhysicalBody{ ClassInstance = llge_PhysicalWorld_createPhysicalBody(ClassInstance, type, x, y, rotation, fixedRotation) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalWorld_createPhysicalBody (IntPtr classInstance, PhysicalBodyType type, float x, float y, float rotation, bool fixedRotation);
		public void DisposePhysicalBody (PhysicalBody body)
		{
			llge_PhysicalWorld_disposePhysicalBody(ClassInstance, body.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalWorld_disposePhysicalBody (IntPtr classInstance, IntPtr body);
		public PhysicalFixedJoint CreatePhysicalFixedJoint (PhysicalBody ground, PhysicalBody body, float x, float y, float maxForce)
		{
			return new PhysicalFixedJoint{ ClassInstance = llge_PhysicalWorld_createPhysicalFixedJoint(ClassInstance, ground.ClassInstance, body.ClassInstance, x, y, maxForce) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalWorld_createPhysicalFixedJoint (IntPtr classInstance, IntPtr ground, IntPtr body, float x, float y, float maxForce);
		public void DisposePhysicalJoint (PhysicalFixedJoint joint)
		{
			llge_PhysicalWorld_disposePhysicalJoint(ClassInstance, joint.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalWorld_disposePhysicalJoint (IntPtr classInstance, IntPtr joint);
		public void Step (float dt, int velocityIterations, int positionIterations)
		{
			llge_PhysicalWorld_step(ClassInstance, dt, velocityIterations, positionIterations);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalWorld_step (IntPtr classInstance, float dt, int velocityIterations, int positionIterations);
		public void Dispose ()
		{
			llge_PhysicalWorld_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalWorld_dispose (IntPtr classInstance);
	}
	
	public class PhysicalFactory
	{
		public IntPtr ClassInstance;
		public PhysicalWorld CreatePhysicalWorld ()
		{
			return new PhysicalWorld{ ClassInstance = llge_PhysicalFactory_createPhysicalWorld(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFactory_createPhysicalWorld (IntPtr classInstance);
		public PhysicalShape CreateCircleShape (float x, float y, float r)
		{
			return new PhysicalShape{ ClassInstance = llge_PhysicalFactory_createCircleShape(ClassInstance, x, y, r) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFactory_createCircleShape (IntPtr classInstance, float x, float y, float r);
		public PhysicalShape CreateBoxShape (float x, float y, float rx, float ry, float rotation)
		{
			return new PhysicalShape{ ClassInstance = llge_PhysicalFactory_createBoxShape(ClassInstance, x, y, rx, ry, rotation) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFactory_createBoxShape (IntPtr classInstance, float x, float y, float rx, float ry, float rotation);
		public PhysicalShape CreatePolygonShape (IntPtr vertices2f, int count)
		{
			return new PhysicalShape{ ClassInstance = llge_PhysicalFactory_createPolygonShape(ClassInstance, vertices2f, count) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_PhysicalFactory_createPolygonShape (IntPtr classInstance, IntPtr vertices2f, int count);
		public void Dispose ()
		{
			llge_PhysicalFactory_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_PhysicalFactory_dispose (IntPtr classInstance);
	}
	
	public class TerrainConfig
	{
		public IntPtr ClassInstance;
		public void Set (TerrainStripeConfigType type, float inWidth, float outWidth, float width)
		{
			llge_TerrainConfig_set(ClassInstance, type, inWidth, outWidth, width);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainConfig_set (IntPtr classInstance, TerrainStripeConfigType type, float inWidth, float outWidth, float width);
		public void SetPhysicsMode (TerrainStripePhysicsType mode)
		{
			llge_TerrainConfig_setPhysicsMode(ClassInstance, mode);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainConfig_setPhysicsMode (IntPtr classInstance, TerrainStripePhysicsType mode);
		public void SetFlipReversed (bool value)
		{
			llge_TerrainConfig_setFlipReversed(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainConfig_setFlipReversed (IntPtr classInstance, bool value);
		public void SetTilesConfig (uint value)
		{
			llge_TerrainConfig_setTilesConfig(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainConfig_setTilesConfig (IntPtr classInstance, uint value);
	}
	
	public class TerrainStripeBuilder
	{
		public IntPtr ClassInstance;
		public TerrainConfig GetConfig ()
		{
			return new TerrainConfig{ ClassInstance = llge_TerrainStripeBuilder_getConfig(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TerrainStripeBuilder_getConfig (IntPtr classInstance);
		public void BuildStripe (IntPtr terrainStripePoints, float tension, int count, bool closed)
		{
			llge_TerrainStripeBuilder_buildStripe(ClassInstance, terrainStripePoints, tension, count, closed);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainStripeBuilder_buildStripe (IntPtr classInstance, IntPtr terrainStripePoints, float tension, int count, bool closed);
		public int GetDebugRenderVerticesCount ()
		{
			return llge_TerrainStripeBuilder_getDebugRenderVerticesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TerrainStripeBuilder_getDebugRenderVerticesCount (IntPtr classInstance);
		public void GetDebugRenderVertices (IntPtr vertices2f)
		{
			llge_TerrainStripeBuilder_getDebugRenderVertices(ClassInstance, vertices2f);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainStripeBuilder_getDebugRenderVertices (IntPtr classInstance, IntPtr vertices2f);
		public MeshesResult GetResult ()
		{
			return new MeshesResult{ ClassInstance = llge_TerrainStripeBuilder_getResult(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TerrainStripeBuilder_getResult (IntPtr classInstance);
		public int GetEdgesCount ()
		{
			return llge_TerrainStripeBuilder_getEdgesCount(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private int llge_TerrainStripeBuilder_getEdgesCount (IntPtr classInstance);
		public void GetEdge (int i, IntPtr vertices2f)
		{
			llge_TerrainStripeBuilder_getEdge(ClassInstance, i, vertices2f);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainStripeBuilder_getEdge (IntPtr classInstance, int i, IntPtr vertices2f);
		public void Dispose ()
		{
			llge_TerrainStripeBuilder_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainStripeBuilder_dispose (IntPtr classInstance);
	}
	
	public class TerrainFactory
	{
		public IntPtr ClassInstance;
		public TerrainStripeBuilder CreateStripeBuilder ()
		{
			return new TerrainStripeBuilder{ ClassInstance = llge_TerrainFactory_createStripeBuilder(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr llge_TerrainFactory_createStripeBuilder (IntPtr classInstance);
		public void Dispose ()
		{
			llge_TerrainFactory_dispose(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TerrainFactory_dispose (IntPtr classInstance);
	}
	
	public class TestGame
	{
		public IntPtr ClassInstance;
		public void SetRootPath (String rootPath)
		{
			llge_TestGame_setRootPath(ClassInstance, rootPath);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_setRootPath (IntPtr classInstance, String rootPath);
		public void UpdateColors (IntPtr colors)
		{
			llge_TestGame_updateColors(ClassInstance, colors);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_updateColors (IntPtr classInstance, IntPtr colors);
		public void UpdateMouse (int rawX, int rawY, int windowX, int windowY, uint buttons)
		{
			llge_TestGame_updateMouse(ClassInstance, rawX, rawY, windowX, windowY, buttons);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_updateMouse (IntPtr classInstance, int rawX, int rawY, int windowX, int windowY, uint buttons);
		public void UpdateEnvironment (int w, int h, float ellapsedTime)
		{
			llge_TestGame_updateEnvironment(ClassInstance, w, h, ellapsedTime);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_updateEnvironment (IntPtr classInstance, int w, int h, float ellapsedTime);
		public void Load ()
		{
			llge_TestGame_load(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_load (IntPtr classInstance);
		public void Update ()
		{
			llge_TestGame_update(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_update (IntPtr classInstance);
		public void Render ()
		{
			llge_TestGame_render(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_render (IntPtr classInstance);
		public void Release ()
		{
			llge_TestGame_release(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void llge_TestGame_release (IntPtr classInstance);
	}
	
	public class llge
	{
		static public Batch2d CreateBatch2d ()
		{
			return new Batch2d{ ClassInstance = createBatch2d() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createBatch2d ();
		static public Texture CreateTextureByID (uint id)
		{
			return new Texture{ ClassInstance = createTextureByID(id) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createTextureByID (uint id);
		static public ContentManager CreateContentManager ()
		{
			return new ContentManager{ ClassInstance = createContentManager() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createContentManager ();
		static public ObbContentProvider CreateContentProvider ()
		{
			return new ObbContentProvider{ ClassInstance = createContentProvider() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createContentProvider ();
		static public GraphicsFactory CreateGraphicsFactory ()
		{
			return new GraphicsFactory{ ClassInstance = createGraphicsFactory() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createGraphicsFactory ();
		static public GeometryFactory CreateGeometryFactory ()
		{
			return new GeometryFactory{ ClassInstance = createGeometryFactory() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createGeometryFactory ();
		static public void InitRenderContext ()
		{
			initRenderContext();
		}
		
		[DllImport(Version.Dll)]
		static extern private void initRenderContext ();
		static public NativeMemoryProfiler CreateNativeMemoryProfiler ()
		{
			return new NativeMemoryProfiler{ ClassInstance = createNativeMemoryProfiler() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createNativeMemoryProfiler ();
		static public SpineResource CreateSpineResource ()
		{
			return new SpineResource{ ClassInstance = createSpineResource() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createSpineResource ();
		static public PhysicalFactory CreatePhysicalFactory (float scaleDimensions, float scaleVelocity)
		{
			return new PhysicalFactory{ ClassInstance = createPhysicalFactory(scaleDimensions, scaleVelocity) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createPhysicalFactory (float scaleDimensions, float scaleVelocity);
		static public TerrainFactory CreateTerrainFactory ()
		{
			return new TerrainFactory{ ClassInstance = createTerrainFactory() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createTerrainFactory ();
	}
	
}

